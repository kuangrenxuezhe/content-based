// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: supplement.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "supplement.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace souyue {
namespace recmd {

namespace {

const ::google::protobuf::Descriptor* Empty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Empty_reflection_ = NULL;
const ::google::protobuf::Descriptor* CategoryClick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CategoryClick_reflection_ = NULL;
const ::google::protobuf::Descriptor* CategoryItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CategoryItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CategoryDistribution_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CategoryDistribution_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_supplement_2eproto() {
  protobuf_AddDesc_supplement_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "supplement.proto");
  GOOGLE_CHECK(file != NULL);
  Empty_descriptor_ = file->message_type(0);
  static const int Empty_offsets_[1] = {
  };
  Empty_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Empty_descriptor_,
      Empty::default_instance_,
      Empty_offsets_,
      -1,
      -1,
      -1,
      sizeof(Empty),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Empty, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Empty, _is_default_instance_));
  CategoryClick_descriptor_ = file->message_type(1);
  static const int CategoryClick_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryClick, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryClick, category_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryClick, publish_time_),
  };
  CategoryClick_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CategoryClick_descriptor_,
      CategoryClick::default_instance_,
      CategoryClick_offsets_,
      -1,
      -1,
      -1,
      sizeof(CategoryClick),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryClick, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryClick, _is_default_instance_));
  CategoryItem_descriptor_ = file->message_type(2);
  static const int CategoryItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryItem, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryItem, category_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryItem, publish_time_),
  };
  CategoryItem_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CategoryItem_descriptor_,
      CategoryItem::default_instance_,
      CategoryItem_offsets_,
      -1,
      -1,
      -1,
      sizeof(CategoryItem),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryItem, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryItem, _is_default_instance_));
  CategoryDistribution_descriptor_ = file->message_type(3);
  static const int CategoryDistribution_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryDistribution, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryDistribution, distribution_),
  };
  CategoryDistribution_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CategoryDistribution_descriptor_,
      CategoryDistribution::default_instance_,
      CategoryDistribution_offsets_,
      -1,
      -1,
      -1,
      sizeof(CategoryDistribution),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryDistribution, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryDistribution, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_supplement_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Empty_descriptor_, &Empty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CategoryClick_descriptor_, &CategoryClick::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CategoryItem_descriptor_, &CategoryItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CategoryDistribution_descriptor_, &CategoryDistribution::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_supplement_2eproto() {
  delete Empty::default_instance_;
  delete Empty_reflection_;
  delete CategoryClick::default_instance_;
  delete CategoryClick_reflection_;
  delete CategoryItem::default_instance_;
  delete CategoryItem_reflection_;
  delete CategoryDistribution::default_instance_;
  delete CategoryDistribution_reflection_;
}

void protobuf_AddDesc_supplement_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::souyue::recmd::protobuf_AddDesc_message_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020supplement.proto\022\014souyue.recmd\032\rmessag"
    "e.proto\"\007\n\005Empty\"K\n\rCategoryClick\022\017\n\007use"
    "r_id\030\001 \001(\004\022\023\n\013category_id\030\002 \001(\005\022\024\n\014publi"
    "sh_time\030\003 \001(\005\"J\n\014CategoryItem\022\017\n\007item_id"
    "\030\001 \001(\004\022\023\n\013category_id\030\002 \001(\005\022\024\n\014publish_t"
    "ime\030\003 \001(\005\"T\n\024CategoryDistribution\022\017\n\007use"
    "r_id\030\001 \001(\004\022+\n\014distribution\030\002 \003(\0132\025.souyu"
    "e.recmd.ItemTagb\006proto3", 303);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "supplement.proto", &protobuf_RegisterTypes);
  Empty::default_instance_ = new Empty();
  CategoryClick::default_instance_ = new CategoryClick();
  CategoryItem::default_instance_ = new CategoryItem();
  CategoryDistribution::default_instance_ = new CategoryDistribution();
  Empty::default_instance_->InitAsDefaultInstance();
  CategoryClick::default_instance_->InitAsDefaultInstance();
  CategoryItem::default_instance_->InitAsDefaultInstance();
  CategoryDistribution::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_supplement_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_supplement_2eproto {
  StaticDescriptorInitializer_supplement_2eproto() {
    protobuf_AddDesc_supplement_2eproto();
  }
} static_descriptor_initializer_supplement_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Empty::Empty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:souyue.recmd.Empty)
}

void Empty::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Empty::Empty(const Empty& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:souyue.recmd.Empty)
}

void Empty::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Empty::~Empty() {
  // @@protoc_insertion_point(destructor:souyue.recmd.Empty)
  SharedDtor();
}

void Empty::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Empty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Empty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Empty_descriptor_;
}

const Empty& Empty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_supplement_2eproto();
  return *default_instance_;
}

Empty* Empty::default_instance_ = NULL;

Empty* Empty::New(::google::protobuf::Arena* arena) const {
  Empty* n = new Empty;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Empty::Clear() {
}

bool Empty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:souyue.recmd.Empty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:souyue.recmd.Empty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:souyue.recmd.Empty)
  return false;
#undef DO_
}

void Empty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:souyue.recmd.Empty)
  // @@protoc_insertion_point(serialize_end:souyue.recmd.Empty)
}

::google::protobuf::uint8* Empty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:souyue.recmd.Empty)
  // @@protoc_insertion_point(serialize_to_array_end:souyue.recmd.Empty)
  return target;
}

int Empty::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Empty::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Empty* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Empty>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Empty::MergeFrom(const Empty& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void Empty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Empty::CopyFrom(const Empty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Empty::IsInitialized() const {

  return true;
}

void Empty::Swap(Empty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Empty::InternalSwap(Empty* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Empty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Empty_descriptor_;
  metadata.reflection = Empty_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Empty

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CategoryClick::kUserIdFieldNumber;
const int CategoryClick::kCategoryIdFieldNumber;
const int CategoryClick::kPublishTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CategoryClick::CategoryClick()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:souyue.recmd.CategoryClick)
}

void CategoryClick::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CategoryClick::CategoryClick(const CategoryClick& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:souyue.recmd.CategoryClick)
}

void CategoryClick::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  category_id_ = 0;
  publish_time_ = 0;
}

CategoryClick::~CategoryClick() {
  // @@protoc_insertion_point(destructor:souyue.recmd.CategoryClick)
  SharedDtor();
}

void CategoryClick::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CategoryClick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CategoryClick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CategoryClick_descriptor_;
}

const CategoryClick& CategoryClick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_supplement_2eproto();
  return *default_instance_;
}

CategoryClick* CategoryClick::default_instance_ = NULL;

CategoryClick* CategoryClick::New(::google::protobuf::Arena* arena) const {
  CategoryClick* n = new CategoryClick;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CategoryClick::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CategoryClick*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(user_id_, publish_time_);

#undef ZR_HELPER_
#undef ZR_

}

bool CategoryClick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:souyue.recmd.CategoryClick)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_category_id;
        break;
      }

      // optional int32 category_id = 2;
      case 2: {
        if (tag == 16) {
         parse_category_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_publish_time;
        break;
      }

      // optional int32 publish_time = 3;
      case 3: {
        if (tag == 24) {
         parse_publish_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &publish_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:souyue.recmd.CategoryClick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:souyue.recmd.CategoryClick)
  return false;
#undef DO_
}

void CategoryClick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:souyue.recmd.CategoryClick)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional int32 category_id = 2;
  if (this->category_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->category_id(), output);
  }

  // optional int32 publish_time = 3;
  if (this->publish_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->publish_time(), output);
  }

  // @@protoc_insertion_point(serialize_end:souyue.recmd.CategoryClick)
}

::google::protobuf::uint8* CategoryClick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:souyue.recmd.CategoryClick)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional int32 category_id = 2;
  if (this->category_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->category_id(), target);
  }

  // optional int32 publish_time = 3;
  if (this->publish_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->publish_time(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:souyue.recmd.CategoryClick)
  return target;
}

int CategoryClick::ByteSize() const {
  int total_size = 0;

  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  // optional int32 category_id = 2;
  if (this->category_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->category_id());
  }

  // optional int32 publish_time = 3;
  if (this->publish_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->publish_time());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CategoryClick::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CategoryClick* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CategoryClick>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CategoryClick::MergeFrom(const CategoryClick& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.category_id() != 0) {
    set_category_id(from.category_id());
  }
  if (from.publish_time() != 0) {
    set_publish_time(from.publish_time());
  }
}

void CategoryClick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CategoryClick::CopyFrom(const CategoryClick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoryClick::IsInitialized() const {

  return true;
}

void CategoryClick::Swap(CategoryClick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CategoryClick::InternalSwap(CategoryClick* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(category_id_, other->category_id_);
  std::swap(publish_time_, other->publish_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CategoryClick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CategoryClick_descriptor_;
  metadata.reflection = CategoryClick_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CategoryClick

// optional uint64 user_id = 1;
void CategoryClick::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 CategoryClick::user_id() const {
  // @@protoc_insertion_point(field_get:souyue.recmd.CategoryClick.user_id)
  return user_id_;
}
 void CategoryClick::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:souyue.recmd.CategoryClick.user_id)
}

// optional int32 category_id = 2;
void CategoryClick::clear_category_id() {
  category_id_ = 0;
}
 ::google::protobuf::int32 CategoryClick::category_id() const {
  // @@protoc_insertion_point(field_get:souyue.recmd.CategoryClick.category_id)
  return category_id_;
}
 void CategoryClick::set_category_id(::google::protobuf::int32 value) {
  
  category_id_ = value;
  // @@protoc_insertion_point(field_set:souyue.recmd.CategoryClick.category_id)
}

// optional int32 publish_time = 3;
void CategoryClick::clear_publish_time() {
  publish_time_ = 0;
}
 ::google::protobuf::int32 CategoryClick::publish_time() const {
  // @@protoc_insertion_point(field_get:souyue.recmd.CategoryClick.publish_time)
  return publish_time_;
}
 void CategoryClick::set_publish_time(::google::protobuf::int32 value) {
  
  publish_time_ = value;
  // @@protoc_insertion_point(field_set:souyue.recmd.CategoryClick.publish_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CategoryItem::kItemIdFieldNumber;
const int CategoryItem::kCategoryIdFieldNumber;
const int CategoryItem::kPublishTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CategoryItem::CategoryItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:souyue.recmd.CategoryItem)
}

void CategoryItem::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CategoryItem::CategoryItem(const CategoryItem& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:souyue.recmd.CategoryItem)
}

void CategoryItem::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  item_id_ = GOOGLE_ULONGLONG(0);
  category_id_ = 0;
  publish_time_ = 0;
}

CategoryItem::~CategoryItem() {
  // @@protoc_insertion_point(destructor:souyue.recmd.CategoryItem)
  SharedDtor();
}

void CategoryItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CategoryItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CategoryItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CategoryItem_descriptor_;
}

const CategoryItem& CategoryItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_supplement_2eproto();
  return *default_instance_;
}

CategoryItem* CategoryItem::default_instance_ = NULL;

CategoryItem* CategoryItem::New(::google::protobuf::Arena* arena) const {
  CategoryItem* n = new CategoryItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CategoryItem::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CategoryItem*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(item_id_, publish_time_);

#undef ZR_HELPER_
#undef ZR_

}

bool CategoryItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:souyue.recmd.CategoryItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 item_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_category_id;
        break;
      }

      // optional int32 category_id = 2;
      case 2: {
        if (tag == 16) {
         parse_category_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_publish_time;
        break;
      }

      // optional int32 publish_time = 3;
      case 3: {
        if (tag == 24) {
         parse_publish_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &publish_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:souyue.recmd.CategoryItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:souyue.recmd.CategoryItem)
  return false;
#undef DO_
}

void CategoryItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:souyue.recmd.CategoryItem)
  // optional uint64 item_id = 1;
  if (this->item_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_id(), output);
  }

  // optional int32 category_id = 2;
  if (this->category_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->category_id(), output);
  }

  // optional int32 publish_time = 3;
  if (this->publish_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->publish_time(), output);
  }

  // @@protoc_insertion_point(serialize_end:souyue.recmd.CategoryItem)
}

::google::protobuf::uint8* CategoryItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:souyue.recmd.CategoryItem)
  // optional uint64 item_id = 1;
  if (this->item_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_id(), target);
  }

  // optional int32 category_id = 2;
  if (this->category_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->category_id(), target);
  }

  // optional int32 publish_time = 3;
  if (this->publish_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->publish_time(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:souyue.recmd.CategoryItem)
  return target;
}

int CategoryItem::ByteSize() const {
  int total_size = 0;

  // optional uint64 item_id = 1;
  if (this->item_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->item_id());
  }

  // optional int32 category_id = 2;
  if (this->category_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->category_id());
  }

  // optional int32 publish_time = 3;
  if (this->publish_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->publish_time());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CategoryItem::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CategoryItem* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CategoryItem>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CategoryItem::MergeFrom(const CategoryItem& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.item_id() != 0) {
    set_item_id(from.item_id());
  }
  if (from.category_id() != 0) {
    set_category_id(from.category_id());
  }
  if (from.publish_time() != 0) {
    set_publish_time(from.publish_time());
  }
}

void CategoryItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CategoryItem::CopyFrom(const CategoryItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoryItem::IsInitialized() const {

  return true;
}

void CategoryItem::Swap(CategoryItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CategoryItem::InternalSwap(CategoryItem* other) {
  std::swap(item_id_, other->item_id_);
  std::swap(category_id_, other->category_id_);
  std::swap(publish_time_, other->publish_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CategoryItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CategoryItem_descriptor_;
  metadata.reflection = CategoryItem_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CategoryItem

// optional uint64 item_id = 1;
void CategoryItem::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 CategoryItem::item_id() const {
  // @@protoc_insertion_point(field_get:souyue.recmd.CategoryItem.item_id)
  return item_id_;
}
 void CategoryItem::set_item_id(::google::protobuf::uint64 value) {
  
  item_id_ = value;
  // @@protoc_insertion_point(field_set:souyue.recmd.CategoryItem.item_id)
}

// optional int32 category_id = 2;
void CategoryItem::clear_category_id() {
  category_id_ = 0;
}
 ::google::protobuf::int32 CategoryItem::category_id() const {
  // @@protoc_insertion_point(field_get:souyue.recmd.CategoryItem.category_id)
  return category_id_;
}
 void CategoryItem::set_category_id(::google::protobuf::int32 value) {
  
  category_id_ = value;
  // @@protoc_insertion_point(field_set:souyue.recmd.CategoryItem.category_id)
}

// optional int32 publish_time = 3;
void CategoryItem::clear_publish_time() {
  publish_time_ = 0;
}
 ::google::protobuf::int32 CategoryItem::publish_time() const {
  // @@protoc_insertion_point(field_get:souyue.recmd.CategoryItem.publish_time)
  return publish_time_;
}
 void CategoryItem::set_publish_time(::google::protobuf::int32 value) {
  
  publish_time_ = value;
  // @@protoc_insertion_point(field_set:souyue.recmd.CategoryItem.publish_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CategoryDistribution::kUserIdFieldNumber;
const int CategoryDistribution::kDistributionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CategoryDistribution::CategoryDistribution()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:souyue.recmd.CategoryDistribution)
}

void CategoryDistribution::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CategoryDistribution::CategoryDistribution(const CategoryDistribution& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:souyue.recmd.CategoryDistribution)
}

void CategoryDistribution::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
}

CategoryDistribution::~CategoryDistribution() {
  // @@protoc_insertion_point(destructor:souyue.recmd.CategoryDistribution)
  SharedDtor();
}

void CategoryDistribution::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CategoryDistribution::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CategoryDistribution::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CategoryDistribution_descriptor_;
}

const CategoryDistribution& CategoryDistribution::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_supplement_2eproto();
  return *default_instance_;
}

CategoryDistribution* CategoryDistribution::default_instance_ = NULL;

CategoryDistribution* CategoryDistribution::New(::google::protobuf::Arena* arena) const {
  CategoryDistribution* n = new CategoryDistribution;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CategoryDistribution::Clear() {
  user_id_ = GOOGLE_ULONGLONG(0);
  distribution_.Clear();
}

bool CategoryDistribution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:souyue.recmd.CategoryDistribution)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_distribution;
        break;
      }

      // repeated .souyue.recmd.ItemTag distribution = 2;
      case 2: {
        if (tag == 18) {
         parse_distribution:
          DO_(input->IncrementRecursionDepth());
         parse_loop_distribution:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_distribution()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_distribution;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:souyue.recmd.CategoryDistribution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:souyue.recmd.CategoryDistribution)
  return false;
#undef DO_
}

void CategoryDistribution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:souyue.recmd.CategoryDistribution)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // repeated .souyue.recmd.ItemTag distribution = 2;
  for (unsigned int i = 0, n = this->distribution_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->distribution(i), output);
  }

  // @@protoc_insertion_point(serialize_end:souyue.recmd.CategoryDistribution)
}

::google::protobuf::uint8* CategoryDistribution::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:souyue.recmd.CategoryDistribution)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // repeated .souyue.recmd.ItemTag distribution = 2;
  for (unsigned int i = 0, n = this->distribution_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->distribution(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:souyue.recmd.CategoryDistribution)
  return target;
}

int CategoryDistribution::ByteSize() const {
  int total_size = 0;

  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  // repeated .souyue.recmd.ItemTag distribution = 2;
  total_size += 1 * this->distribution_size();
  for (int i = 0; i < this->distribution_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->distribution(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CategoryDistribution::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CategoryDistribution* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CategoryDistribution>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CategoryDistribution::MergeFrom(const CategoryDistribution& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  distribution_.MergeFrom(from.distribution_);
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void CategoryDistribution::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CategoryDistribution::CopyFrom(const CategoryDistribution& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoryDistribution::IsInitialized() const {

  return true;
}

void CategoryDistribution::Swap(CategoryDistribution* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CategoryDistribution::InternalSwap(CategoryDistribution* other) {
  std::swap(user_id_, other->user_id_);
  distribution_.UnsafeArenaSwap(&other->distribution_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CategoryDistribution::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CategoryDistribution_descriptor_;
  metadata.reflection = CategoryDistribution_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CategoryDistribution

// optional uint64 user_id = 1;
void CategoryDistribution::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 CategoryDistribution::user_id() const {
  // @@protoc_insertion_point(field_get:souyue.recmd.CategoryDistribution.user_id)
  return user_id_;
}
 void CategoryDistribution::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:souyue.recmd.CategoryDistribution.user_id)
}

// repeated .souyue.recmd.ItemTag distribution = 2;
int CategoryDistribution::distribution_size() const {
  return distribution_.size();
}
void CategoryDistribution::clear_distribution() {
  distribution_.Clear();
}
const ::souyue::recmd::ItemTag& CategoryDistribution::distribution(int index) const {
  // @@protoc_insertion_point(field_get:souyue.recmd.CategoryDistribution.distribution)
  return distribution_.Get(index);
}
::souyue::recmd::ItemTag* CategoryDistribution::mutable_distribution(int index) {
  // @@protoc_insertion_point(field_mutable:souyue.recmd.CategoryDistribution.distribution)
  return distribution_.Mutable(index);
}
::souyue::recmd::ItemTag* CategoryDistribution::add_distribution() {
  // @@protoc_insertion_point(field_add:souyue.recmd.CategoryDistribution.distribution)
  return distribution_.Add();
}
::google::protobuf::RepeatedPtrField< ::souyue::recmd::ItemTag >*
CategoryDistribution::mutable_distribution() {
  // @@protoc_insertion_point(field_mutable_list:souyue.recmd.CategoryDistribution.distribution)
  return &distribution_;
}
const ::google::protobuf::RepeatedPtrField< ::souyue::recmd::ItemTag >&
CategoryDistribution::distribution() const {
  // @@protoc_insertion_point(field_list:souyue.recmd.CategoryDistribution.distribution)
  return distribution_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace recmd
}  // namespace souyue

// @@protoc_insertion_point(global_scope)
