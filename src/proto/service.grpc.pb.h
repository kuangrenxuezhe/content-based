// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: service.proto
#ifndef GRPC_service_2eproto__INCLUDED
#define GRPC_service_2eproto__INCLUDED

#include "service.pb.h"

#include <grpc++/support/async_stream.h>
#include <grpc++/impl/rpc_method.h>
#include <grpc++/impl/proto_utils.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/support/async_unary_call.h>
#include <grpc++/support/status.h>
#include <grpc++/support/stub_options.h>
#include <grpc++/support/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace souyue {
namespace recmd {
namespace service {

class ContentBasedModel GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status queryCategory(::grpc::ClientContext* context, const ::souyue::recmd::Empty& request, ::souyue::recmd::RepeatedKeyPair* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::souyue::recmd::RepeatedKeyPair>> AsyncqueryCategory(::grpc::ClientContext* context, const ::souyue::recmd::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::souyue::recmd::RepeatedKeyPair>>(AsyncqueryCategoryRaw(context, request, cq));
    }
    virtual ::grpc::Status predictUserInterests(::grpc::ClientContext* context, const ::souyue::recmd::Category& request, ::souyue::recmd::AlgorithmCategory* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::souyue::recmd::AlgorithmCategory>> AsyncpredictUserInterests(::grpc::ClientContext* context, const ::souyue::recmd::Category& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::souyue::recmd::AlgorithmCategory>>(AsyncpredictUserInterestsRaw(context, request, cq));
    }
    virtual ::grpc::Status queryNewsTrends(::grpc::ClientContext* context, const ::souyue::recmd::Empty& request, ::souyue::recmd::CategoryDistribution* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::souyue::recmd::CategoryDistribution>> AsyncqueryNewsTrends(::grpc::ClientContext* context, const ::souyue::recmd::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::souyue::recmd::CategoryDistribution>>(AsyncqueryNewsTrendsRaw(context, request, cq));
    }
    virtual ::grpc::Status queryUserInterests(::grpc::ClientContext* context, const ::souyue::recmd::Category& request, ::souyue::recmd::CategoryDistribution* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::souyue::recmd::CategoryDistribution>> AsyncqueryUserInterests(::grpc::ClientContext* context, const ::souyue::recmd::Category& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::souyue::recmd::CategoryDistribution>>(AsyncqueryUserInterestsRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::souyue::recmd::RepeatedKeyPair>* AsyncqueryCategoryRaw(::grpc::ClientContext* context, const ::souyue::recmd::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::souyue::recmd::AlgorithmCategory>* AsyncpredictUserInterestsRaw(::grpc::ClientContext* context, const ::souyue::recmd::Category& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::souyue::recmd::CategoryDistribution>* AsyncqueryNewsTrendsRaw(::grpc::ClientContext* context, const ::souyue::recmd::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::souyue::recmd::CategoryDistribution>* AsyncqueryUserInterestsRaw(::grpc::ClientContext* context, const ::souyue::recmd::Category& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::Channel>& channel);
    ::grpc::Status queryCategory(::grpc::ClientContext* context, const ::souyue::recmd::Empty& request, ::souyue::recmd::RepeatedKeyPair* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::souyue::recmd::RepeatedKeyPair>> AsyncqueryCategory(::grpc::ClientContext* context, const ::souyue::recmd::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::souyue::recmd::RepeatedKeyPair>>(AsyncqueryCategoryRaw(context, request, cq));
    }
    ::grpc::Status predictUserInterests(::grpc::ClientContext* context, const ::souyue::recmd::Category& request, ::souyue::recmd::AlgorithmCategory* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::souyue::recmd::AlgorithmCategory>> AsyncpredictUserInterests(::grpc::ClientContext* context, const ::souyue::recmd::Category& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::souyue::recmd::AlgorithmCategory>>(AsyncpredictUserInterestsRaw(context, request, cq));
    }
    ::grpc::Status queryNewsTrends(::grpc::ClientContext* context, const ::souyue::recmd::Empty& request, ::souyue::recmd::CategoryDistribution* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::souyue::recmd::CategoryDistribution>> AsyncqueryNewsTrends(::grpc::ClientContext* context, const ::souyue::recmd::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::souyue::recmd::CategoryDistribution>>(AsyncqueryNewsTrendsRaw(context, request, cq));
    }
    ::grpc::Status queryUserInterests(::grpc::ClientContext* context, const ::souyue::recmd::Category& request, ::souyue::recmd::CategoryDistribution* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::souyue::recmd::CategoryDistribution>> AsyncqueryUserInterests(::grpc::ClientContext* context, const ::souyue::recmd::Category& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::souyue::recmd::CategoryDistribution>>(AsyncqueryUserInterestsRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::Channel> channel_;
    ::grpc::ClientAsyncResponseReader< ::souyue::recmd::RepeatedKeyPair>* AsyncqueryCategoryRaw(::grpc::ClientContext* context, const ::souyue::recmd::Empty& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::souyue::recmd::AlgorithmCategory>* AsyncpredictUserInterestsRaw(::grpc::ClientContext* context, const ::souyue::recmd::Category& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::souyue::recmd::CategoryDistribution>* AsyncqueryNewsTrendsRaw(::grpc::ClientContext* context, const ::souyue::recmd::Empty& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::souyue::recmd::CategoryDistribution>* AsyncqueryUserInterestsRaw(::grpc::ClientContext* context, const ::souyue::recmd::Category& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_queryCategory_;
    const ::grpc::RpcMethod rpcmethod_predictUserInterests_;
    const ::grpc::RpcMethod rpcmethod_queryNewsTrends_;
    const ::grpc::RpcMethod rpcmethod_queryUserInterests_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::Channel>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::SynchronousService {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status queryCategory(::grpc::ServerContext* context, const ::souyue::recmd::Empty* request, ::souyue::recmd::RepeatedKeyPair* response);
    virtual ::grpc::Status predictUserInterests(::grpc::ServerContext* context, const ::souyue::recmd::Category* request, ::souyue::recmd::AlgorithmCategory* response);
    virtual ::grpc::Status queryNewsTrends(::grpc::ServerContext* context, const ::souyue::recmd::Empty* request, ::souyue::recmd::CategoryDistribution* response);
    virtual ::grpc::Status queryUserInterests(::grpc::ServerContext* context, const ::souyue::recmd::Category* request, ::souyue::recmd::CategoryDistribution* response);
    ::grpc::RpcService* service() GRPC_OVERRIDE GRPC_FINAL;
   private:
    std::unique_ptr< ::grpc::RpcService> service_;
  };
  class AsyncService GRPC_FINAL : public ::grpc::AsynchronousService {
   public:
    explicit AsyncService();
    ~AsyncService() {};
    void RequestqueryCategory(::grpc::ServerContext* context, ::souyue::recmd::Empty* request, ::grpc::ServerAsyncResponseWriter< ::souyue::recmd::RepeatedKeyPair>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestpredictUserInterests(::grpc::ServerContext* context, ::souyue::recmd::Category* request, ::grpc::ServerAsyncResponseWriter< ::souyue::recmd::AlgorithmCategory>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestqueryNewsTrends(::grpc::ServerContext* context, ::souyue::recmd::Empty* request, ::grpc::ServerAsyncResponseWriter< ::souyue::recmd::CategoryDistribution>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestqueryUserInterests(::grpc::ServerContext* context, ::souyue::recmd::Category* request, ::grpc::ServerAsyncResponseWriter< ::souyue::recmd::CategoryDistribution>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
  };
};

}  // namespace service
}  // namespace recmd
}  // namespace souyue


#endif  // GRPC_service_2eproto__INCLUDED
